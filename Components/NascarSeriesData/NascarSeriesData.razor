@using System.Collections.Generic
@inject RaceScheduleViewModel ViewModel

@code {
    public string Year {get; set;} = string.Empty;
    public string Series {get; set;} = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (ViewModel.seriesMapping.TryGetValue(Series, out var actualSeries))
        {
            await ViewModel.LoadAllSchedules();
        }
        else
        {
            ViewModel.ErrorMessage = "Incomplete Data for Series Selection";
        }
    }
}

@* @using System.Collections.Generic
@inject RaceScheduleViewModel ViewModel

@code {
    public string Year {get; set;}
    public string Series {get; set;}
    public string selectedSeries {get; set;}

    protected override async Task OnParametersSetAsync()
    {
        string actualSeries;
        if (ViewModel.seriesMapping.TryGetValue(Series, out actualSeries))
        {
            await ViewModel.LoadSchedules(Year, actualSeries);
        }
        else
        {
            ViewModel.SetError("Incomplete Data for Series Selection");
        }
    }
}

@if (ViewModel.IsLoading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))  
{
    <p>Error: @ViewModel.ErrorMessage</p>  
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>SeriesID</th>
                <th>Race Name</th>
                <th>Date</th>
                <th>Track</th>
                <th>Distance</th>
                <th>Laps</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var race in ViewModel.RaceSchedules)
            {
                <tr>
                    <td>@race.SeriesId</td>
                    <td>@race.RaceName</td>
                    <td>@race.RaceDate.ToShortDateString()</td>
                    <td>@race.TrackName</td>
                    <td>@race.ScheduleDistance</td>
                    <td>@race.ScheduledLaps</td>
                </tr>
            }
        </tbody>
    </table>
} *@