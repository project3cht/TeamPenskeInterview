@page "/"

@using TeamPenskeInterview.Components

@inject RaceScheduleViewModel ViewModel

<PageTitle>Race Sechedule</PageTitle>

<h1>Race Schedule</h1>

<label for="yearSelect">Select Year: </label>
<select id="yearSelect" @bind="selectedYear">
    @foreach (var year in availableYears)
    {
        <option value="@year">@year</option>
    }
</select>

<label for="seriesSelect">Select Series: </label>
<select id="seriesSelect" @bind="selectedSeries">
    @foreach (var series in ViewModel.seriesMapping.Keys)
    {
        <option value="@series">@series</option>
    }
</select>

<button @onclick="OnSelectionChanged">Load Race Schedule</button>

@if (ViewModel.IsLoading)
{
    <p><em>Loading Race Schedule...</em></p>
}
else if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
{
    <p>Error: @ViewModel.ErrorMessage</p>
}
else
{
   <table class="table">
        <thead>
            <tr>
                <th>SeriesID</th>
                <th>RaceName</th>
                <th>Date</th>
                <th>Track</th>
                <th>Distance</th>
                <th>Laps</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var race in ViewModel.RaceSchedules)
            {
                <tr>
                    <td>@race.SeriesId</td>
                    <td>@race.RaceName</td>
                    <td>@race.RaceDate.ToShortDateString()</td>
                    <td>@race.TrackName</td>
                    <td>@race.ScheduleDistance</td>
                    <td>@race.ScheduledLaps</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string selectedYear = DateTime.Now.Year.ToString();
    private string selectedSeries = "Cup Series"; //used as a default selection
    private List<string> availableYears = new() { "2022", "2023", "2024" };
    //private List<string> availableSeries = new() { "series_1", "series_2", "series_3" };

    private async Task OnSelectionChanged()
    {
        Console.WriteLine($"Selected Series: {selectedSeries}"); 
        var actualSeries = ViewModel.seriesMapping[selectedSeries];
        await ViewModel.LoadSchedules(selectedYear, actualSeries);    }
    protected override async Task OnInitializedAsync()
    {
        // Load schedules for the requested year
        await ViewModel.LoadSchedules(selectedYear, ViewModel.seriesMapping[selectedSeries]);
    }
}

@*
// catch only the exception I am worried about
// have t heui response in a easy way
// only catch the exceptions
    they all inherit from exception

catch everything and logg the exception errors
    failed to load data
menu back button compared to the browser back button

!!catch argument exception!!

*@