@page "/"
@using TeamPenskeInterview.Components
@inject RaceScheduleViewModel ViewModel

<PageTitle>Race Schedule</PageTitle>

<h1>NASCAR Race Schedule</h1>

<label>Select Year:</label>
<select @bind="ViewModel.SelectedYear">
    @for (int year = 2020; year <= DateTime.Now.Year + 1; year++)
    {
        <option value="@year">@year</option>
    }
</select>

<label>Select Series:</label>
<select @bind="ViewModel.SelectedSeries">
    @foreach (var series in ViewModel.seriesMapping.Keys)
    {
        <option value="@series">@series</option>
    }
</select>

@if (ViewModel.IsLoading)
{
    <p><em>Loading Race Schedule...</em></p>
}
else if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
{
    <p>Error: @ViewModel.ErrorMessage</p>
}
else
{
    DisplayTable(ViewModel.CurrentSeriesSchedules);
}

@code {
    void DisplayTable(List<RaceSchedule> schedules)
    {
        if (schedules != null && schedules.Count > 0)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Race Name</th>
                        <th>Date</th>
                        <th>Track</th>
                        <th>Distance</th>
                        <th>Laps</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var race in schedules)
                    {
                        <tr>
                            <td>@race.RaceName</td>
                            <td>@race.RaceDate.ToShortDateString()</td>
                            <td>@race.TrackName</td>
                            <td>@race.ScheduleDistance</td>
                            <td>@race.ScheduledLaps</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No schedule available for this series.</p>
        }
    }
}
@* <label for="yearSelect">Select Year: </label>
<select id="yearSelect" @bind="selectedYear">
    @foreach (var year in availableYears)
    {
        <option value="@year">@year</option>
    }
</select>

<label for="seriesSelect">Select Series: </label>
<select id="seriesSelect" @bind="selectedSeries">
    @foreach (var series in ViewModel.seriesMapping.Keys)
    {
        <option value="@series">@series</option>
    }
</select>

<button @onclick="OnSelectionChanged">Load Race Schedule</button> *@

@* @if (ViewModel.IsLoading)
{
    <p><em>Loading Race Schedule...</em></p>
}
else if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
{
    <p>Error: @ViewModel.ErrorMessage</p>
}
else
{
    <h2>Cup Series</h2>
    DisplaySeriesTable(ViewModel.CupSeriesSchedules);
    <h2>Xfinity Series</h2>
    DisplaySeriesTable(ViewModel.XfinitySeriesSchedules);
    <h2>Truck Series</h2>
    DisplaySeriesTable(ViewModel.TruckSeriesSchedules);
}

@code {
    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadAllSchedules();
    }

    void DisplaySeriesTable(List<RaceSchedule> schedules)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Race Name</th>
                    <th>Date</th>
                    <th>Track</th>
                    <th>Distance</th>
                    <th>Laps</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var race in schedules)
                {
                    <tr>
                        <td>@race.RaceName</td>
                        <td>@race.RaceDate.ToShortDateString()</td>
                        <td>@race.TrackName</td>
                        <td>@race.ScheduleDistance</td>
                        <td>@race.ScheduledLaps</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}@if (ViewModel.IsLoading)
{
    <p><em>Loading Race Schedule...</em></p>
}
else if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
{
    <p>Error: @ViewModel.ErrorMessage</p>
}
else
{
    DisplaySeriesTable("Cup Series", ViewModel.CupSeriesSchedules);
    DisplaySeriesTable("Xfinity Series", ViewModel.XfinitySeriesSchedules);
    DisplaySeriesTable("Truck Series", ViewModel.TruckSeriesSchedules);
}

@code {
    private string _selectedYear = DateTime.Now.Year.ToString();
    private string _selectedSeries = "Cup Series";
    private List<string> availableYears = new List<string>();
    public string selectedYear
    {
        get => _selectedYear;
        set {
            if (_selectedYear != value) {
                _selectedYear = value;
                OnParameterChange();
            }
        }
    }
    public string selectedSeries {
        get => _selectedSeries;
        set {
            if (_selectedSeries != value) {
                _selectedSeries = value;
                OnParameterChange();
            }
        }
    }

    
    private async Task OnSelectionChanged()
    {
        Console.WriteLine($"Loading data for Year: {selectedYear}, Series: {selectedSeries}");
        await ViewModel.LoadSchedules(selectedYear, ViewModel.seriesMapping[selectedSeries]);   
        StateHasChanged();
    }
    private async Task OnParameterChange() {
        await ViewModel.LoadSchedules(selectedYear, 
        ViewModel.seriesMapping[selectedSeries]);
    }
    protected override async Task OnInitializedAsync()
    {
        
        await ViewModel.LoadAllSchedules();
    }
    void DisplaySeriesTable(string seriesName, List<RaceSchedule> schedules)
    {
        <h2>@seriesName</h2>
        <table class="table">
            <thead>
                <tr>
                    <th>Race Name</th>
                    <th>Date</th>
                    <th>Track</th>
                    <th>Distance</th>
                    <th>Laps</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var race in schedules)
                {
                    <tr>
                        <td>@race.RaceName</td>
                        <td>@race.RaceDate.ToShortDateString()</td>
                        <td>@race.TrackName</td>
                        <td>@race.ScheduleDistance</td>
                        <td>@race.ScheduledLaps</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    
    private async Task<List<string>> FetchAvailableYears()
    {
        return new List<string> {"2021", "2022", "2023", "2024"};
    }
} *@